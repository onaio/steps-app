apply plugin: 'com.android.application'
apply plugin: "com.github.kt3k.coveralls"
apply plugin: 'jacoco'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

jacoco {
    toolVersion = '0.8.6'
}

buildscript {
    repositories {
        mavenLocal()
        google()
        jcenter()
        mavenCentral()

        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }

        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath 'gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.0'
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.1'
    }
}

allprojects {
    repositories {
        // Check that you have Google's Maven repository (if not, add it).
        google()
    }
}

android {
    compileSdkVersion 31
    buildToolsVersion '21.1.2'
    defaultConfig {
        applicationId "com.onaio.steps"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 15
        versionName "3.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            if (project.rootProject.file("local.properties").exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file("local.properties").newDataInputStream())
                if (properties != null &&
                        properties.containsKey("store_file") &&
                        properties.containsKey("store_password") &&
                        properties.containsKey("key_alias") &&
                        properties.containsKey("key_password")) {

                    storeFile file(project.rootProject.file(System.getProperty("user.home") + "/steps.keystore.jks").exists() ? System.getProperty("user.home") + "/steps.keystore.jks" : properties["store_file"]);
                    storePassword properties["store_password"];
                    keyAlias properties["key_alias"];
                    keyPassword properties["key_password"];
                } else {
                    println("One of the following properties not set: store_file, store_password, key_alias or key_password");
                }
            } else {
                println("local.properties does not exist");
            }
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField 'String', 'JR_FORM_ID', JR_FORM_ID
            buildConfigField 'String', 'JR_FORM_TITLE', JR_FORM_TITLE
            buildConfigField 'String', 'ENDPOINT_URL', DEBUG_ENDPOINT_URL
            buildConfigField 'String', 'IMPORT_URL', DEBUG_IMPORT_URL
        }
        release {
            minifyEnabled true

            v1SigningEnabled false
            v2SigningEnabled true

            signingConfig signingConfigs.release
            buildConfigField 'String', 'JR_FORM_ID', JR_FORM_ID
            buildConfigField 'String', 'JR_FORM_TITLE', JR_FORM_TITLE
            buildConfigField 'String', 'ENDPOINT_URL', PROD_ENDPOINT_URL
            buildConfigField 'String', 'IMPORT_URL', PROD_IMPORT_URL
        }
    }
    android {
        packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/DEPENDENCIES'
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        animationsDisabled true
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    google()
}

dependencies {
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.7.3'
    testImplementation 'com.squareup:fest-android:1.0.8'
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'org.mockito:mockito-inline:4.0.0'
    implementation 'com.opencsv:opencsv:3.3'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    // ZXING
    implementation "com.google.zxing:core:3.3.0"
    implementation "com.journeyapps:zxing-android-embedded:3.5.0"

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:29.2.1')

    // Add the dependency for the Firebase SDK for Google Analytics
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-crashlytics'

    // extensible small logger api
    implementation 'com.jakewharton.timber:timber:5.0.1'
}

tasks.withType(Test) {
    systemProperty "robolectric.logging", "stdout"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android*/**/*.*', '**/*$ViewBinder*.*']
    def debugTreeJava = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def debugTreeKotlin = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugTreeJava, debugTreeKotlin]))
    executionData.from(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
    ]))
}

coveralls {
    sourceDirs = ["$project.projectDir/src/main/java"]
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}